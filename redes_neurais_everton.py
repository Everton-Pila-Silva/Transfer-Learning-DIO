# -*- coding: utf-8 -*-
"""redes_neurais_everton.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ic8djUCrIWu4uMXAQlHD8msMeWD6DPqd

# Transfer Learning - Problema cats x dogs

Banco de dados: [aqui](https://www.kaggle.com/c/dogs-vs-cats).

## Procedimentos Iniciais

Apagar a pasta catsxdogs caso algum novo dado seja incluído na pasta:
"""

#!rm -rf catsxdogs

"""Download da pasta:"""

!git clone https://github.com/cunhamaicon/catsxdogs

"""Importação dos pacotes:"""

import pandas as pd
import numpy as np
import os
import keras
import matplotlib.pyplot as plt
from keras.layers import Dense,GlobalAveragePooling2D
from keras.applications import MobileNet
from keras.preprocessing import image
from keras.applications.mobilenet import preprocess_input
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Model
from keras.optimizers import Adam
from keras.layers import Dropout

"""## CNN - Transfer learning:

Importando o modelo MobileNet que foi previamente treinado no ImageNet e descartando a última camada de neurônios:
"""

model=MobileNet(weights='imagenet',include_top=False)

"""Criando a saída do modelo MobileNet:"""

x=model.output
x=GlobalAveragePooling2D()(x)

"""Adicionando uma camada intermediária e a camada final:"""

x=Dense(50,activation='relu')(x)
preds=Dense(1,activation='sigmoid')(x) 
model=Model(inputs=model.input,outputs=preds)

"""Visualizando todas as camadas da nova rede criada usando o modelo MobileNetV2:"""

for i,layer in enumerate(model.layers):
  print(i,layer.name)

"""Definindo qual camada da rede será treinada. Nesse caso somente as duas últimas camadas adicionadas:"""

for layer in model.layers[:88]:
    layer.trainable=False
for layer in model.layers[88:]:
    layer.trainable=True

"""## ImageDataGenerator

Definindo o tamanho de cada batch:
"""

batch_size = 32

"""Cada imagem do banco será apresentada a rede de uma forma diferente através do ImageDataGenerator:"""

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.4,
                                   zoom_range = 0.4,
                                   height_shift_range=0.3,
                                   width_shift_range=0.3,
                                   rotation_range=50,
                                   horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale = 1./255)

training_set = train_datagen.flow_from_directory('catsxdogs/training_set',
                                                 target_size = (224, 224),
                                                 batch_size = batch_size,
                                                 class_mode = 'binary')

test_set = test_datagen.flow_from_directory('catsxdogs/test_set',
                                            target_size = (224, 224),
                                            batch_size = batch_size,
                                            class_mode = 'binary')

"""## Treinamento

Definindo os parâmetros de compilação da rede:
"""

model.compile(optimizer=Adam(lr = 0.0001),loss='binary_crossentropy',metrics=['accuracy'])

"""Fazendo o treinamento da rede:"""

history = model.fit_generator(generator=training_set,
                   steps_per_epoch=8000/batch_size,
                   epochs=10,
                   validation_data = test_set,
                   validation_steps = 2000/batch_size)

"""Salvando o modelo para utilização futura:"""

model.save('catsxdogs_mobilenet.h5')
from google.colab import files
files.download('catsxdogs_mobilenet.h5')

"""## Previsão

Mostrando os arquivos da pasta single_prediction com imagens inéditas para a rede classificar:
"""

ls catsxdogs/single_prediction

"""Escolhendo uma imagem da pasta single_prediction para fazer a previsão:"""

test_image = image.load_img('catsxdogs/single_prediction/chino1.jpg', target_size = (224, 224))

test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image, axis = 0)
test_image = test_image/255

result = model.predict(test_image)

if result[0][0] > 0.5:
    prediction = 'dog'
else:
    prediction = 'cat'
    
print(prediction)